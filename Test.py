#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 24 12:44:42 2017

@author: limengchu
"""
'''This is a test module to illustrate how to combine different modules imported 
   here to get some analytic results. 
'''
#import modules 
from Agent_growth import log_popgrow
from Behaviour_Rule import sim_random_inn
from Metric import HHI
from Analysis import *
import statistics

# set variables 
num_people = log_popgrow()
num_k1 = 10
num_p = 20
inn = [0.001*i for i in range(11)]
mem = range(1,11)
samplesize = 20

'''Problem: This function below is in Analysis module and should work without defining here.
            However, once I call this command without defining the function here:
                print(sensitivity_sim(sim_random_inn, num_people,mem,inn,num_p,num_k1,samplesize))
            It will return a wrong answer. 
            
'''
def sensitivity_sim(sim_function, num_people, mem,inn,num_p,num_k1,samplesize,wholedist=True):
    t1 = time.time()
    num_pp = num_people
    if __name__ == '__main__':
        for i in inn:
            for j in mem:
                with Pool(7) as p:
                    result = p.starmap(sim_function,itertools.repeat([num_pp,j,i,num_p,num_k1,wholedist],samplesize))
                #save files 
                with open("myfile_"+str(i)+"_"+str(j)+".txt", "wb") as f:
                    f.write(str.encode('# These are {0} simulation results in this file, each of them contains a {1}*{2} matrix\n'.format(samplesize,num_p,\
                                       len(num_pp))))
                    for slice_2d in result:
                        np.savetxt(f, slice_2d, fmt = '%-4.1f')
                        f.write(str.encode('# This is a separate sample\n'))
    t2 = time.time()
    # This assert line is just for sanity check 
    assert np.all(result == np.loadtxt('myfile_'+str(inn[-1])+'_'+str(mem[-1])+'.txt').reshape(samplesize,num_p,len(num_pp)))
    return t2-t1

print(sensitivity_sim(sim_random_inn, num_people,mem,inn,num_p,num_k1,samplesize))

'''Use data generated by sensitivity_sim function to derive HHI and plot  
'''
t1= time.time()
HHindex_mean = []
HHindex_std = []
m = log_popgrow().index(max(log_popgrow()))
for i in inn:
    for j in mem:
        sample = np.loadtxt('myfile_'+str(i)+"_"+str(j)+'.txt').reshape(samplesize,num_p,len(num_people))
        target_array = [k[:,m] for k in sample]
        with Pool(10) as p:
            samplehhi = p.map(HHI,target_array)
        ans_av = statistics.mean(samplehhi)
        ans_std = statistics.stdev(samplehhi)
        HHindex_mean.append(ans_av)
        HHindex_std.append(ans_std)

HHindex_mean = np.array(HHindex_mean).reshape(len(inn),len(mem))
HHindex_std = np.array(HHindex_std).reshape(len(inn),len(mem))
t2 = time.time()
print(t2-t1)

X,Y = inn,mem
Z = HHindex_mean.transpose()

sensitivity_plot(X, Y, Z,xlabel='Innovation', ylabel='Memory', title='Mean of HHI across {0} samples'.format(samplesize))

Z = HHindex_std.transpose()

sensitivity_plot(X, Y, Z,xlabel='Innovation', ylabel='Memory', title='Std of HHI across {0} samples'.format(samplesize))
