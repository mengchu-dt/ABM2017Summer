# -*- coding: utf-8 -*-
"""
Created on Tue Jul 18 18:58:03 2017

@author: mnmg91
"""

'''This module provides the essential tools to calibrate the models in the Behaviour_Rule 
   module and analyze the results via various plot techniques.  

   An overview of the module:
   -------------------------
   
       sensitivity_sim: It simulates, by the chosen sim_function, at every pair of parameters 
                        from memory and innovation lists for certain number of times(samplesize). 
                        Each single simulation results, by default, a matrix of shape num_p 
                        by len(num_people). Results for every parameter combination will be saved
                        as .txt file for later use. The names of files take the format of
                        'myfile_innovation vaule_memory value.txt'.To use the data generated by 
                        this function, try np.loadtxt function, or see Test.py.    

       sensitivity_plot: sensitivity_plot: It creates contour or 3D plots for given X,Y,Z parameters. 
                         Also available for setting axis labels and figure title and saving the plots. 
                         Usually use in combination with functions in metric module, see test.py for example.
   ----------------------------------------------------------------------------------------------------------
   The cProfile module is useful to analyse the performance of functions and identify bottlenecks. E.g.  
   cProfile.run('sim_random_inn(log_popgrow(),1,0.001,20,10)') returns a table of how many times each method
   is called and the time it takes when running sim_random_inn(log_popgrow(),1,0.001,20,10).
'''
import matplotlib.pyplot as plt
import time
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import cProfile
from multiprocessing import Pool
import numpy as np
import itertools
import statistics 


def sensitivity_sim(sim_function, num_people, mem,inn,num_p,num_k1,samplesize,wholedist=True):
    '''Parameters:
        sim_function: function
                      A function from Behaviour_Rule module that runs single simulation of some 
                      evolution model. 
        The rest of parameters are introduced in the Behaviour_Rule module as shared parameters. 
    '''
    t1 = time.time()
    num_pp = num_people
    if __name__ == '__main__':
        for i in inn:
            for j in mem:
                with Pool(7) as p:
                    result = p.starmap(sim_function,itertools.repeat([num_pp,j,i,num_p,num_k1,wholedist],samplesize))
                #save files 
                with open("myfile_"+str(i)+"_"+str(j)+".txt", "wb") as f:
                    f.write(str.encode('# These are {0} simulation results in this file, \
                                       each of them contains a {1}*{2} matrix\n'.format(samplesize,num_p,\
                                       len(num_pp))))
                    for slice_2d in result:
                        np.savetxt(f, slice_2d, fmt = '%-4.1f')
                        f.write(str.encode('# This is a separate sample\n'))
    t2 = time.time()
    # This assert line is just for sanity check 
    assert np.all(result == np.loadtxt('myfile_'+str(inn[-1])+'_'+str(mem[-1])+'.txt').reshape(samplesize,num_p,len(num_pp)))
    return t2-t1

#ans=np.loadtxt('myfile_0.0_2.txt')
#sensitivity_sim(sim_random_inn, log_popgrow(),mem,inn,20,10,5)

def sensitivity_plot(X, Y, Z,zlowerlim=0,zupperlim=1,xlabel=None, ylabel=None, title=None, save=False,contour = True, surface = False):
    '''Parameters:
        X : list
            Variable along x axis. e.g. a list of 11 innovation parameters 
            ranging from 0 to 0.01 in step of 0.001
        Y : list 
            Variable along y axis. e.g. a list of 10 memory parameters 
            ranging from 1 to 10 in step of 1
        Z:  np.ndarray
            Usually the matrix with values corresponding to each pair of X and Y
        xlabel: string
                The label on x axis, should be set in line with X. Similar for ylabel and title
        Save: bool
              If True, the function will save the plot generated with the name as the title being set
              and in jpg format. Default is False
        contour, surface: bool
                          Two kinds of plot available. Default will generate contour plot for the given data
    '''
    # Contour plot
    if contour == True:
        fig = plt.figure()
        ax = fig.gca(projection='3d')
        # Make data.
        X, Y = np.meshgrid(X, Y)
        ax.set_zlim(zlowerlim, zupperlim)
        cset = ax.contourf(X, Y, Z, zdir='z', offset=0, cmap=cm.coolwarm)
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        ax.set_title(title)
        # Add a color bar which maps values to colors.
        fig.colorbar(cset, shrink=0.6, aspect=8)
        if save == True:
            plt.savefig(title+'.jpg')
        plt.show()
    # 3D surface plot
    if surface == True:
        fig = plt.figure()
        ax = fig.gca(projection='3d')
        # Make data.
        X, Y = np.meshgrid(X, Y)
        # Plot the surface.
        surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap = cm.coolwarm, linewidth=0)
        # Customize  axis.
        ax.set_zlim(zlowerlim, zupperlim)
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        ax.set_title(title)
        # Add a color bar which maps values to colors.
        fig.colorbar(surf, shrink=0.6, aspect=8)
        if save == True:
            plt.savefig(title+'.jpg')
        plt.show()